# -*- coding: utf-8 -*-
"""522H0006_DangThanhNhan_Lab02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n90Ii0LYJV9psbFXO7Uj73zphu1Ysb3g

**Đặng Thành Nhân-MSSV:522H0006 - Lab02**
"""

#Example01
from fractions import Fraction
def P(event , space):
  return Fraction(len(event & space), len(space))
D = {1, 2, 3, 4, 5, 6}
even = {2, 4, 6}

print(P(even, D))

#Example02
from fractions import Fraction
def P(event , space):
  return Fraction(len(event & space), len(space))

def cross(A, B):
    return {a + b for a in A for b in B}
urn = cross('W', '12345678') | cross('B', '123456') | cross ('R', '123456789')

import itertools

def combos(items , n):
  '''All combinations of n items; each combo as a
  concatenated str.'''
  return {' '.join(combo) for combo in itertools.
  combinations(items , n)}

U6 = combos(urn, 6)
print(len(U6))

import random

print(random.sample(U6, 10))

#Prob1
red6 = {s for s in U6 if s.count('R') == 6}
print(P(red6, U6))

#Prob2
b3w2r1 = {s for s in U6 if s.count('B') == 3 and s.count('W'
) == 2 and s.count('R') == 1}
print(P(b3w2r1 , U6))

#Prob3
w4 = {s for s in U6 if s.count('W') == 4}
print(P(w4, U6))

#Example03
import random
n = 10
count = 0;
for simulations in range(n):
  tosses = random.randint(0, 1)
  if tosses == 1:
    count += 1
print(count/n)

#Example04
import random
count = 0;
n = 1000000;
for i in range(n):
  die1 = random.randint(1, 6)
  die2 = random.randint(1, 6)
  if die1==1 and die2==6:
    count += 1
print(count/n)

#Example05
 # Import the required function libraries
from itertools import product

# Define ranks , suits and cards
Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}
Suits = {'♡', '♢', '♣', '♠'}
Cards = list(product(Ranks , Suits))
print(len(Cards))
print(Cards[:10])
#   Write a function to calculate the experimental probability of drawing the red
# card with the number of tests n as the parameter:

def simulator_poker(n):
  count = 0;
  for i in range(n):
    index = random.randint(0, 51)
    if Cards[index][1] == '♡' or Cards[index][1] == '♢':
      count += 1
  return count/n

# Call above function with n = 10, 100, 1000, 10000, ...
print(simulator_poker(10))
print(simulator_poker(100))
print(simulator_poker(1000))
print(simulator_poker(10000))

#Exercise01
import random
def simualtor_dice1(n):
  count = 0;
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if (die1 % 2 == 0)and (die2 % 2 == 0):
      count += 1
  return (count/n)
print(simualtor_dice1(10000))

#Exercise02
import random
def simualtor_dice2(n):
  count = 0;
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if (die1 % 2 != 0)and (die2 % 2 != 0):
      count += 1
  return (count/n)
print(simualtor_dice2(10000))

#Exercise03
import random
def simualtor_dice3(n):
  count = 0;
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if (die1 == die2):
      count += 1
  return (count/n)
print(simualtor_dice3(10000))

#Exercise04
import random
def simualtor_dice4(n):
  count = 0;
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if (die1 == 1)and (die2 == 6):
      count += 1
  return (count/n)
print(simualtor_dice4(10000))

#Exercise05
import random
def simualtor_dice5(n):
  count = 0;
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if (die1 + die2) > 6:
      count += 1
  return (count/n)
print(simualtor_dice5(10000))

#Exercise06
from itertools import product

Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}
Suits = {'♡', '♢', '♣', '♠'}
Cards = list(product(Ranks , Suits))

def simulator_poker1(n):
  count = 0;
  for i in range(n):
    count1 = 0;
    pick = random.sample(Cards, 5)
    for j in pick:
      if j[1] == '♡':
        count1 += 1;
    if (count1 == 5):
      count += 1;
  return count/n
print(simulator_poker1(1000))

#Exercise07
import random
from itertools import product
Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}
Suits = {'♡', '♢', '♣', '♠'}
Cards = list(product(Ranks , Suits))
def simulator_poker2(n):
  count = 0
  for i in range(n):
    typelist = []
    pick = random.sample(Cards,4)
    for j in pick:
      typelist.append(j[1])
    if (len(set(typelist)) == 4):
      count += 1
  return count/n

print(simulator_poker2(100000))

#Exercise08
from fractions import Fraction
def P(event , space):
  return Fraction(len(event & space), len(space))

def cross(A, B):
    return {a + b for a in A for b in B}
urn = cross('W', '12345678') | cross('B', '123456') | cross ('R', '123456789')

import itertools

def combos(items , n):
  '''All combinations of n items; each combo as a
  concatenated str.'''
  return {' '.join(combo) for combo in itertools.
  combinations(items , n)}

U6 = combos(urn, 6)

W2B2R2 = {s for s in U6 if s.count('W') == 2 and s.count('B') == 2 and s.count('R') == 2}
print(P(W2B2R2, U6))