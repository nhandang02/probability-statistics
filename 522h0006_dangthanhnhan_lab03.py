# -*- coding: utf-8 -*-
"""522H0006_DangThanhNhan_Lab03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L1SqkOr03K332SI8IIsxpXdohTCNXA_L

**Đặng Thành Nhân-MSSV:522H0006 - Lab03**
"""

#Example 01
from fractions import Fraction

def P(event, space):
  return Fraction(len(event & space), len(space))

S = {'BB', 'BG', 'GB', 'GG'}

B = {s for s in S if 'B' in s}
A_B = {s for s in B if s.count('B')==2}

P_B = P(B, S)
P_A_B = P(A_B, S)

P_A_with_B = P_A_B / P_B
print(P_A_with_B)

#Exercise 01
from fractions import Fraction
import itertools
from itertools import product

def P(event, space):
  return Fraction(len(event & space), len(space))


E = ['M', 'F']
k = 3
S = {p for p in itertools.product(E, repeat=k)}

#b
print(len(S))

#c
B = {s for s in S if 'F' in s}
print(B)

#d
A = {s for s in S if s.count('F')==3}
print(A)

#e
A_B = {s for s in S if 'F' and s.count('F')==3}
P_B = P(B, S)
P_A_B = P(A_B, S)

P_A_with_B = P_A_B / P_B
print(P_A_with_B)

#Exercise 02
from fractions import Fraction


S = [('Thanh', 'Nữ'), ('Hồng', 'Nữ'), ('Thương', 'Nữ'), ('Đào', 'Nữ'), ('My', 'Nữ'), ('Yến', 'Nữ'), ('Hạnh', 'Nữ'),
('My', 'Nữ'), ('Vy', 'Nữ'), ('Tiên', 'Nữ'), ('Thanh', 'Nam'), ('Thanh', 'Nam'), ('Bình', 'Nam'), ('Nhật', 'Nam')
, ('Hào', 'Nam'), ('Đạt', 'Nam'), ('Minh', 'Nam')]

#a
A = [s for s in S if 'Thanh' in s ]
print(A)

#b
B = [s for s in S if 'Nữ' in s]
print(B)

#c
A_B = [s for s in S if 'Nữ' in s and 'Thanh' in s]
print(A_B)

#d
P_A = len(A) / len(S)
P_B = len(B) / len(S)
P_A_B = len(A_B) / len(S)

#e
P_A_with_B = P_A_B / P_B
print(P_A_with_B)

#Exercise 03
import random
import itertools
from itertools import combinations

#a
Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}
Suits = {'♡', '♢', '♣', '♠'}
Cards = []
for suit in Suits:
  for rank in Ranks:
    card = str(rank) + suit
    Cards.append(card)
print(Cards)

#b
B = random.sample(Cards, 3)
print(B)

#c
A1 = []
space_3Cards = list(combinations(Cards, 3))
print(space_3Cards)

for event_3cards in space_3Cards:
  king_count = [card[0] for card in event_3cards].count('K')

  if king_count == 1 or king_count == 2:
    A1.append(event_3cards)

#d
A2 = []
space_3Cards = list(combinations(Cards, 3))
print(space_3Cards)

for event_3cards in space_3Cards:
  king_count = [card[0] for card in event_3cards].count('K')

  if king_count >= 1:
    A2.append(event_3cards)

#e
print(len(A1)/len(space_3Cards))
print(len(A2)/len(space_3Cards))